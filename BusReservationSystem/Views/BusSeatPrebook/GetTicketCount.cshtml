@model UserData.Core.Model.PassengerDetails;
@{
    string error = TempData["Error"] != null ? TempData["Error"].ToString() : string.Empty;

    if (TempData["passengerCount"] != null)
    {
        Model.passengercount = Convert.ToInt32(TempData["passengerCount"]) + 1;
        Model.Fare = 1;
    }
    else
    {
        Model.passengercount++;
        Model.Fare = 0;
    }
    // Model.passengercount = ViewBag.passengerCount != null ? ViewBag.passengerCount + 1 : Model.passengercount++;
    Model.Count--;

}
<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
</head>
<style>
    body.signup {
        background: url(/Images/Signup.jpg) no-repeat;
        background-size: cover;
    }

    .form {
        margin-left: 60%;
        margin-top: 5%;
        width: 15%;
    }

    .my-textbox::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .error {
        color: red;
        font-weight: 900;
    }
</style>
<body class="signup">
    <div class="form">
        <h4>Seats Booked List</h4>
        @if (Model.seatnoList.Count > 0)
        {
            @foreach (var seatno in Model.seatnoList)
            {
                @seatno.Seatno

                <br />
            }

        }
        else
        {
            <h5>No Seats Booked Yet</h5>
        }

        @using (Html.BeginForm("GetTicketCount", "BusSeatPrebook", FormMethod.Post, new { @id = "formvalidation", @onsubmit = "resetForm();" }))
        {

            <h4>Passenger @Model.passengercount</h4>
            @Html.HiddenFor(m=>m.Fare)
            @Html.HiddenFor(m=>m.UserId)
            @Html.HiddenFor(m=>m.Count)
            @Html.HiddenFor(m=>m.TravelId)
            @Html.HiddenFor(m=>m.passengercount)
            @Html.HiddenFor(m=>m.seatnoList)
            <div class="align">
                <b style="color:yellow;font-weight:900;">@Html.Label("Name")<i style="color:red;">*</i>  <br /></b>
                @Html.TextBoxFor(m => m.PassengerName,new { @id = "PassengerName",@placeholder="Name",@value = ""})
                <br />
            </div>
            <div class="align">
                <b style="color:yellow;font-weight:900;">@Html.Label("Age")<i style="color:red;">*</i>  <br /></b>
                @Html.TextBoxFor(m=>m.Age, new { @placeholder="Age" , @class = "my-textbox",@id="Age",@type="number"})
                <br />
            </div>
            <div class="align">
                <b style="color:yellow;font-weight:900;">@Html.Label("SeatNumber")<i style="color:red;">*</i>  <br /></b>
                @Html.TextBoxFor(m=>m.Seatno, new { @placeholder="Seatnumber" , @class = "my-textbox",@id="Seatnumber",@type="number"})
                <br />
                <br />
            </div>
            <button type="submit" class="btn btn-success" style="font-weight:900;">Submit</button>

            <a class="btn btn-danger" asp-area="" asp-controller="BusSeatPrebook" asp-action="UserDetailPage" style="color:white;font-weight:900;">Back</a>


        }
    </div>

</body>
<script>
    // if (!string.IsNullOrEmpty(error))
    // {
    //     alert("Seat number not available choose another...");
    // }
    // debugger;
    // var myArray = [];
    // if(Model.seatnoList!=null)
    // {
    //     foreach (var d in Model.seatnoList)
    //     {
    //         myArray.push(d.Seatno);
    //     }
    // }


    $.validator.addMethod("age", function (value) {

        return value > 0 && value <= 100;
    });
    $.validator.addMethod("seatno", function (value) {

        return value > 0 && value <= 60;
    });
    // $.validator.addMethod("seatnoIsavailable", function (value) {
    //     debugger;
    //     if (myArray != null && value > 0) {
    //         return !myArray.Contains(value);
    //     }
    //     return true;

    // });

    $("#formvalidation").validate({
        rules:
        {
            PassengerName: {
                required: true,
                minlength: 3,
                maxlength: 20,
            },
            Age: {
                required: true,
                digits: true,
                age: true,
            },
            Seatno: {
                required: true,
                digits: true,
                seatno: true,
                // seatnoIsavailable:true,
                remote:
                {
                    url: '/BusSeatPrebook/CheckSeatAvailability/', // Endpoint to check seat availability
                    type: 'post',
                    data:
                    {
                        bookedSeats: function () {

                            var userinput = $('#Seatnumber').val();
                            return userinput; // Pass the booked seat numbers directly from the model
                        }
                    }
                }
            },
        },
        messages: {
            PassengerName: {
                required: " name field is required",
                minlength: " name contains minimum 3 character",
                maxlength: " name contails maximum 20 characters",
            },
            Age: {
                required: "Age field is required",
                digits: "Age contain only numeric",
                age: "Age must be grater than 5 and less than 100"
            },
            Seatno: {
                required: "Seat number field is required",
                digits: "Seat number contains only numeric",
                seatno: "Seat number must be grater than 0 and less than 60",
                remote: "Seat number not available",
            },
        }
    });
        // var myArray = [];
        // myArray = myArray;
        // $.validator.addMethod("seatnoIsavailable", function (value) {
        //     if (myArray != null) {
        //         return myArray.includes(value);
        //     }
        //     return true;
        // });
</script>
